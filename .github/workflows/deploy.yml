name: MiraClass 배포 파이프라인

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: 테스트 실행
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            teacher-dashboard/package-lock.json
            student-app/package-lock.json
      
      - name: Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            backend/requirements.txt
            ai-engine/requirements.txt
      
      - name: 백엔드 의존성 설치
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: AI 엔진 의존성 설치
        run: |
          cd ai-engine
          pip install -r requirements.txt
      
      - name: 교사 대시보드 의존성 설치
        run: |
          cd teacher-dashboard
          npm ci
      
      - name: 학생 앱 의존성 설치
        run: |
          cd student-app
          npm ci
      
      - name: 백엔드 테스트
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          ENCRYPTION_KEY: test_encryption_key_32_characters
        run: |
          cd backend
          python -m pytest tests/ -v --cov=app --cov-report=xml
      
      - name: AI 엔진 테스트
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          cd ai-engine
          python -m pytest tests/ -v --cov=app --cov-report=xml
      
      - name: 교사 대시보드 테스트
        run: |
          cd teacher-dashboard
          npm run test -- --coverage --watchAll=false
      
      - name: 교사 대시보드 빌드 테스트
        run: |
          cd teacher-dashboard
          npm run build
      
      - name: 코드 커버리지 업로드
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml,./ai-engine/coverage.xml,./teacher-dashboard/coverage/lcov.info
          fail_ci_if_error: false

  security:
    name: 보안 검사
    runs-on: ubuntu-latest
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: Python 보안 검사
        run: |
          pip install safety bandit
          safety check -r backend/requirements.txt
          safety check -r ai-engine/requirements.txt
          bandit -r backend/ -f json -o backend-security.json || true
          bandit -r ai-engine/ -f json -o ai-engine-security.json || true
      
      - name: Node.js 보안 검사
        run: |
          cd teacher-dashboard && npm audit --audit-level=high
          cd ../student-app && npm audit --audit-level=high
      
      - name: Docker 이미지 보안 검사
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: SARIF 결과 업로드
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service: [backend, ai-engine, teacher-dashboard]
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3
      
      - name: 컨테이너 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: 스테이징 배포
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.miraclass.com
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: 스테이징 서버 배포
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            cd /opt/miraclass
            git pull origin main
            
            # 환경 변수 업데이트
            echo "${{ secrets.STAGING_ENV }}" > .env.production
            
            # Docker 이미지 업데이트
            docker-compose -f docker-compose.prod.yml pull
            
            # 배포 스크립트 실행
            ./scripts/deploy.sh staging
      
      - name: 스테이징 헬스 체크
        run: |
          sleep 30
          curl -f https://staging.miraclass.com/api/health || exit 1
          curl -f https://staging.miraclass.com/ai/health || exit 1
      
      - name: Slack 알림
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-production:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/production' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://miraclass.com
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      - name: 프로덕션 배포 승인 대기
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "프로덕션 배포 승인 요청"
          issue-body: |
            **배포 정보**
            - 브랜치: ${{ github.ref }}
            - 커밋: ${{ github.sha }}
            - 작성자: ${{ github.actor }}
            
            **변경 사항**
            ${{ github.event.head_commit.message }}
            
            프로덕션 환경에 배포를 승인하시겠습니까?
      
      - name: 프로덕션 백업
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            cd /opt/miraclass
            ./scripts/backup/backup.sh manual
      
      - name: 프로덕션 서버 배포
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            cd /opt/miraclass
            git pull origin production
            
            # 환경 변수 업데이트
            echo "${{ secrets.PRODUCTION_ENV }}" > .env.production
            
            # Docker 이미지 업데이트
            docker-compose -f docker-compose.prod.yml pull
            
            # 배포 스크립트 실행
            ./scripts/deploy.sh production
      
      - name: 프로덕션 헬스 체크
        run: |
          sleep 60
          curl -f https://miraclass.com/api/health || exit 1
          curl -f https://miraclass.com/ai/health || exit 1
      
      - name: 배포 완료 알림
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: ":rocket: 프로덕션 배포가 성공적으로 완료되었습니다!"
      
      - name: 배포 실패 알림
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: ":warning: 프로덕션 배포가 실패했습니다. 즉시 확인이 필요합니다!"

  cleanup:
    name: 정리 작업
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 오래된 Docker 이미지 정리
        run: |
          # 7일 이상 된 이미지 삭제
          docker image prune -a --filter "until=168h" --force || true
      
      - name: 캐시 정리
        run: |
          # GitHub Actions 캐시 정리 (선택사항)
          echo "캐시 정리 완료"