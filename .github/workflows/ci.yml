name: MiraClass CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 매일 오전 2시에 실행 (UTC)
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # 코드 품질 검사
  code-quality:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: |
        npm ci
        cd backend && npm ci
        cd ../ai-engine && npm ci
        cd ../teacher-dashboard && npm ci
        cd ../student-app && npm ci
        
    - name: ESLint 검사
      run: |
        npm run lint:backend
        npm run lint:ai-engine
        npm run lint:frontend
        npm run lint:mobile
        
    - name: Prettier 포맷 검사
      run: npm run format:check
      
    - name: TypeScript 타입 검사
      run: |
        cd backend && npm run type-check
        cd ../ai-engine && npm run type-check
        cd ../teacher-dashboard && npm run type-check
        
    - name: 보안 취약점 검사
      run: |
        npm audit --audit-level=moderate
        cd backend && npm audit --audit-level=moderate
        cd ../ai-engine && npm audit --audit-level=moderate
        cd ../teacher-dashboard && npm audit --audit-level=moderate
        cd ../student-app && npm audit --audit-level=moderate

  # 단위 테스트
  unit-tests:
    name: 단위 테스트
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        service: [backend, ai-engine, teacher-dashboard, student-app]
        
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 의존성 설치
      run: |
        npm ci
        cd ${{ matrix.service }} && npm ci
        
    - name: 단위 테스트 실행
      run: cd ${{ matrix.service }} && npm run test:unit
      
    - name: 코드 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ matrix.service }}/coverage/lcov.info
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
        
    - name: 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.service }}
        path: ./${{ matrix.service }}/test-results/

  # 통합 테스트
  integration-tests:
    name: 통합 테스트
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: miraclass_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      neo4j:
        image: neo4j:5
        env:
          NEO4J_AUTH: neo4j/test_password
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7474:7474
          - 7687:7687
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Docker Compose 설정
      run: |
        cp .env.test.example .env.test
        docker-compose -f docker-compose.test.yml build
        
    - name: 서비스 시작
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # 서비스 시작 대기
        
    - name: 서비스 상태 확인
      run: |
        docker-compose -f docker-compose.test.yml ps
        docker-compose -f docker-compose.test.yml logs
        
    - name: 통합 테스트 실행
      run: |
        cd tests/integration
        npm ci
        npm run test:integration
        
    - name: 테스트 결과 수집
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml exec -T test-reporter node /app/test-reporter.js
        
    - name: 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          tests/integration/results/
          tests/integration/reports/
          
    - name: 서비스 정리
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v
        docker system prune -f

  # E2E 테스트
  e2e-tests:
    name: E2E 테스트
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 전체 환경 구성
      run: |
        cp .env.test.example .env.test
        docker-compose -f docker-compose.test.yml build
        docker-compose -f docker-compose.test.yml up -d
        sleep 60  # 모든 서비스 시작 대기
        
    - name: E2E 테스트 실행
      run: |
        cd tests/integration
        npm ci
        npm run test:e2e
        
    - name: 스크린샷 업로드
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-screenshots
        path: tests/integration/screenshots/
        
    - name: 환경 정리
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v
        docker system prune -f

  # 성능 테스트
  performance-tests:
    name: 성능 테스트
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 성능 테스트 환경 구성
      run: |
        cp .env.test.example .env.test
        docker-compose -f docker-compose.test.yml build
        docker-compose -f docker-compose.test.yml up -d
        sleep 60
        
    - name: 성능 테스트 실행
      run: |
        cd tests/integration
        npm ci
        npm run test:performance
        
    - name: 성능 리포트 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: tests/integration/reports/performance/
        
    - name: 환경 정리
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # 보안 테스트
  security-tests:
    name: 보안 테스트
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 보안 테스트 환경 구성
      run: |
        cp .env.test.example .env.test
        docker-compose -f docker-compose.test.yml build
        docker-compose -f docker-compose.test.yml up -d
        sleep 60
        
    - name: 보안 테스트 실행
      run: |
        cd tests/integration
        npm ci
        npm run test:security
        
    - name: OWASP ZAP 스캔
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: 보안 리포트 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: |
          tests/integration/reports/security/
          report_html.html
          report_json.json
          
    - name: 환경 정리
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # Docker 이미지 빌드
  build-images:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [backend, ai-engine, teacher-dashboard, student-app]
        
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: Docker Hub 로그인
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: miraclass/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 스테이징 배포
  deploy-staging:
    name: 스테이징 배포
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, build-images]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: ECS 태스크 정의 업데이트
      run: |
        aws ecs update-service \
          --cluster miraclass-staging \
          --service miraclass-backend-staging \
          --force-new-deployment
          
        aws ecs update-service \
          --cluster miraclass-staging \
          --service miraclass-ai-engine-staging \
          --force-new-deployment
          
        aws ecs update-service \
          --cluster miraclass-staging \
          --service miraclass-frontend-staging \
          --force-new-deployment
          
    - name: 배포 상태 확인
      run: |
        aws ecs wait services-stable \
          --cluster miraclass-staging \
          --services miraclass-backend-staging miraclass-ai-engine-staging miraclass-frontend-staging
          
    - name: 스테이징 환경 헬스 체크
      run: |
        curl -f https://staging-api.miraclass.com/health || exit 1
        curl -f https://staging.miraclass.com || exit 1
        
    - name: 스테이징 스모크 테스트
      run: |
        cd tests/integration
        npm ci
        ENVIRONMENT=staging npm run test:smoke

  # 프로덕션 배포
  deploy-production:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, security-tests, build-images]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: 프로덕션 배포 승인 대기
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ secrets.PRODUCTION_APPROVERS }}
        minimum-approvals: 2
        issue-title: "프로덕션 배포 승인 요청"
        issue-body: |
          **배포 정보:**
          - 브랜치: ${{ github.ref }}
          - 커밋: ${{ github.sha }}
          - 작성자: ${{ github.actor }}
          
          **변경 사항:**
          ${{ github.event.head_commit.message }}
          
          **테스트 결과:**
          - 단위 테스트: ✅ 통과
          - 통합 테스트: ✅ 통과
          - E2E 테스트: ✅ 통과
          - 보안 테스트: ✅ 통과
          
          승인 후 프로덕션 배포가 진행됩니다.
          
    - name: 데이터베이스 백업
      run: |
        aws rds create-db-snapshot \
          --db-instance-identifier miraclass-prod \
          --db-snapshot-identifier miraclass-prod-$(date +%Y%m%d-%H%M%S)
          
    - name: ECS 태스크 정의 업데이트
      run: |
        aws ecs update-service \
          --cluster miraclass-production \
          --service miraclass-backend-production \
          --force-new-deployment
          
        aws ecs update-service \
          --cluster miraclass-production \
          --service miraclass-ai-engine-production \
          --force-new-deployment
          
        aws ecs update-service \
          --cluster miraclass-production \
          --service miraclass-frontend-production \
          --force-new-deployment
          
    - name: 배포 상태 확인
      run: |
        aws ecs wait services-stable \
          --cluster miraclass-production \
          --services miraclass-backend-production miraclass-ai-engine-production miraclass-frontend-production
          
    - name: 프로덕션 환경 헬스 체크
      run: |
        curl -f https://api.miraclass.com/health || exit 1
        curl -f https://miraclass.com || exit 1
        
    - name: 프로덕션 스모크 테스트
      run: |
        cd tests/integration
        npm ci
        ENVIRONMENT=production npm run test:smoke
        
    - name: 배포 알림
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()

  # 테스트 결과 리포트
  test-report:
    name: 테스트 결과 리포트
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: 테스트 결과 다운로드
      uses: actions/download-artifact@v3
      with:
        path: test-results/
        
    - name: 테스트 리포트 생성
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: MiraClass 테스트 결과
        path: 'test-results/**/*.xml'
        reporter: jest-junit
        
    - name: 커버리지 리포트 생성
      run: |
        npm install -g lcov-result-merger
        lcov-result-merger 'test-results/**/lcov.info' coverage.info
        
    - name: 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.info
        flags: integration
        name: miraclass-coverage
        
    - name: 테스트 결과 코멘트
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        message: |
          ## 🧪 테스트 결과
          
          | 테스트 유형 | 상태 | 결과 |
          |------------|------|------|
          | 단위 테스트 | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} | ${{ needs.unit-tests.result }} |
          | 통합 테스트 | ${{ needs.integration-tests.result == 'success' && '✅' || '❌' }} | ${{ needs.integration-tests.result }} |
          | E2E 테스트 | ${{ needs.e2e-tests.result == 'success' && '✅' || '❌' }} | ${{ needs.e2e-tests.result }} |
          
          자세한 결과는 [Actions 탭](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})에서 확인하세요.

  # 정리 작업
  cleanup:
    name: 정리 작업
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 오래된 아티팩트 정리
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          const oldArtifacts = artifacts.data.artifacts.filter(
            artifact => Date.now() - new Date(artifact.created_at).getTime() > 7 * 24 * 60 * 60 * 1000
          );
          
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          }
          
    - name: Docker 이미지 정리
      run: |
        # 7일 이상 된 이미지 태그 정리
        echo "Docker 이미지 정리는 별도의 스케줄러에서 처리됩니다."